[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame         ",
        "description": "frame         ",
        "isExtraImport": true,
        "detail": "frame         ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame         ",
        "description": "frame         ",
        "isExtraImport": true,
        "detail": "frame         ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame         ",
        "description": "frame         ",
        "isExtraImport": true,
        "detail": "frame         ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame         ",
        "description": "frame         ",
        "isExtraImport": true,
        "detail": "frame         ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame         ",
        "description": "frame         ",
        "isExtraImport": true,
        "detail": "frame         ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "formating",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "formating",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "counter",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "formating",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "counter",
        "importPath": "header        ",
        "description": "header        ",
        "isExtraImport": true,
        "detail": "header        ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "state",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "scroll",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "state",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "scroll",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "state",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "scroll",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "state",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "scroll",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "state",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "scroll",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure     ",
        "description": "configure     ",
        "isExtraImport": true,
        "detail": "configure     ",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "writing",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "writing",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "writing",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "writing",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "writing",
        "importPath": "saving        ",
        "description": "saving        ",
        "isExtraImport": true,
        "detail": "saving        ",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "imp,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imp.",
        "description": "imp.",
        "detail": "imp.",
        "documentation": {}
    },
    {
        "label": "words",
        "importPath": "keywords      ",
        "description": "keywords      ",
        "isExtraImport": true,
        "detail": "keywords      ",
        "documentation": {}
    },
    {
        "label": "words",
        "importPath": "keywords      ",
        "description": "keywords      ",
        "isExtraImport": true,
        "detail": "keywords      ",
        "documentation": {}
    },
    {
        "label": "keywords",
        "importPath": "keywords      ",
        "description": "keywords      ",
        "isExtraImport": true,
        "detail": "keywords      ",
        "documentation": {}
    },
    {
        "label": "words",
        "importPath": "keywords      ",
        "description": "keywords      ",
        "isExtraImport": true,
        "detail": "keywords      ",
        "documentation": {}
    },
    {
        "label": "keywords",
        "importPath": "keywords      ",
        "description": "keywords      ",
        "isExtraImport": true,
        "detail": "keywords      ",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "state",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "screenConfig",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "scroll",
        "importPath": "configure ",
        "description": "configure ",
        "isExtraImport": true,
        "detail": "configure ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame     ",
        "description": "frame     ",
        "isExtraImport": true,
        "detail": "frame     ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame     ",
        "description": "frame     ",
        "isExtraImport": true,
        "detail": "frame     ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "frame     ",
        "description": "frame     ",
        "isExtraImport": true,
        "detail": "frame     ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "header    ",
        "description": "header    ",
        "isExtraImport": true,
        "detail": "header    ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "header    ",
        "description": "header    ",
        "isExtraImport": true,
        "detail": "header    ",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "header    ",
        "description": "header    ",
        "isExtraImport": true,
        "detail": "header    ",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "header    ",
        "description": "header    ",
        "isExtraImport": true,
        "detail": "header    ",
        "documentation": {}
    },
    {
        "label": "words",
        "importPath": "keywords  ",
        "description": "keywords  ",
        "isExtraImport": true,
        "detail": "keywords  ",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "getUserInput  ",
        "description": "getUserInput  ",
        "isExtraImport": true,
        "detail": "getUserInput  ",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "getUserInput  ",
        "description": "getUserInput  ",
        "isExtraImport": true,
        "detail": "getUserInput  ",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "getUserInput  ",
        "description": "getUserInput  ",
        "isExtraImport": true,
        "detail": "getUserInput  ",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "getUserInput  ",
        "description": "getUserInput  ",
        "isExtraImport": true,
        "detail": "getUserInput  ",
        "documentation": {}
    },
    {
        "label": "fileType",
        "importPath": "fileType      ",
        "description": "fileType      ",
        "isExtraImport": true,
        "detail": "fileType      ",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "DataBase      ",
        "description": "DataBase      ",
        "isExtraImport": true,
        "detail": "DataBase      ",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "DataBase      ",
        "description": "DataBase      ",
        "isExtraImport": true,
        "detail": "DataBase      ",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "buildString",
        "importPath": "AUTO          ",
        "description": "AUTO          ",
        "isExtraImport": true,
        "detail": "AUTO          ",
        "documentation": {}
    },
    {
        "label": "KEYS",
        "importPath": "AUTO          ",
        "description": "AUTO          ",
        "isExtraImport": true,
        "detail": "AUTO          ",
        "documentation": {}
    },
    {
        "label": "buildString",
        "importPath": "AUTO          ",
        "description": "AUTO          ",
        "isExtraImport": true,
        "detail": "AUTO          ",
        "documentation": {}
    },
    {
        "label": "KEYS",
        "importPath": "AUTO          ",
        "description": "AUTO          ",
        "isExtraImport": true,
        "detail": "AUTO          ",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "mouse",
        "importPath": "pynput",
        "description": "pynput",
        "isExtraImport": true,
        "detail": "pynput",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "mainLinux",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mainLinux",
        "description": "mainLinux",
        "detail": "mainLinux",
        "documentation": {}
    },
    {
        "label": "mainWin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mainWin",
        "description": "mainWin",
        "detail": "mainWin",
        "documentation": {}
    },
    {
        "label": "clear",
        "importPath": "configure\t   ",
        "description": "configure\t   ",
        "isExtraImport": true,
        "detail": "configure\t   ",
        "documentation": {}
    },
    {
        "label": "moveCursor",
        "importPath": "configure\t   ",
        "description": "configure\t   ",
        "isExtraImport": true,
        "detail": "configure\t   ",
        "documentation": {}
    },
    {
        "label": "fileType",
        "importPath": "fileType\t   ",
        "description": "fileType\t   ",
        "isExtraImport": true,
        "detail": "fileType\t   ",
        "documentation": {}
    },
    {
        "label": "readfile",
        "importPath": "fileType\t   ",
        "description": "fileType\t   ",
        "isExtraImport": true,
        "detail": "fileType\t   ",
        "documentation": {}
    },
    {
        "label": "postion",
        "kind": 2,
        "importPath": "AUTO.KEYS",
        "description": "AUTO.KEYS",
        "peekOfCode": "def postion(x, y, max_x, string = \"\"):\n    asc                 = frame.frame(custom=True)\n    reset               = init.init.reset\n    c_bg                = init.init.bold + colors.bg.rgb(10,10,10)\n    move                = moveCursor.cursor \n    c                   = init.init.bold + colors.fg.rbg(255,255,255)\n    Input, size         = header.counter( 0 )\n    sys.stdout.write(move.LEFT(pos=1000))\n    sys.stdout.write(\n    Input + c_bg + \" \" * (max_x - (size+2) ) + reset + ",
        "detail": "AUTO.KEYS",
        "documentation": {}
    },
    {
        "label": "POS",
        "kind": 2,
        "importPath": "AUTO.KEYS",
        "description": "AUTO.KEYS",
        "peekOfCode": "def POS(x, y, max_x, string = \"\"):\n    asc                 = frame.frame(custom=True)\n    reset               = init.init.reset\n    c_bg                = init.init.bold + colors.bg.rgb(10,10,10)\n    move                = moveCursor.cursor \n    c                   = init.init.bold + colors.fg.rbg(255,255,255)\n    Input, size         = header.counter( 0 )\n    sys.stdout.write(move.LEFT(pos=1000))\n    sys.stdout.write(\n    Input + c_bg + \" \" * (max_x - (size+2) ) + reset + ",
        "detail": "AUTO.KEYS",
        "documentation": {}
    },
    {
        "label": "auto",
        "kind": 2,
        "importPath": "AUTO.KEYS",
        "description": "AUTO.KEYS",
        "peekOfCode": "def auto(x : int, y : int, max_y : int, max_x : int, keys : dict = {}, keys_items: int = 1, \n                        drop_string : str = \"\", my_strings : list=[], I : int = 0, LEN : int = 0, idd_select : int = 0) :\n    # the lastest two line\n    max_down            = 2\n    # max line on the black screen \n    LINE                = max_y - ( y + max_down + 1)\n    # same as LINE\n    N                   = max_y-(4+1) \n    # frame used to draw the black screen \n    asc                 = frame.frame(custom=True)",
        "detail": "AUTO.KEYS",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 2,
        "importPath": "AUTO.buildString",
        "description": "AUTO.buildString",
        "peekOfCode": "def case():\n    lower_case = \"abcdefghijklmnopqrstuvwxyz_\"\n    upper_case = lower_case.upper()\n    return lower_case+upper_case\ndef string(string : str = \"\", idd : int = 0):\n    str_ = \"\"\n    try:\n        # checking if string exists\n        if string: \n            # checking if the char idd of string is contained in ",
        "detail": "AUTO.buildString",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 2,
        "importPath": "AUTO.buildString",
        "description": "AUTO.buildString",
        "peekOfCode": "def string(string : str = \"\", idd : int = 0):\n    str_ = \"\"\n    try:\n        # checking if string exists\n        if string: \n            # checking if the char idd of string is contained in \n            # the acceptable chars \n            if string[idd] in case(): \n                # initialization\n                _id_        = idd ",
        "detail": "AUTO.buildString",
        "documentation": {}
    },
    {
        "label": "scrollBar",
        "kind": 6,
        "importPath": "AUTO.scrollBar",
        "description": "AUTO.scrollBar",
        "peekOfCode": "class scrollBar:\n    def __init__(self): \n        pass\n    def vertical(self):\n        pass",
        "detail": "AUTO.scrollBar",
        "documentation": {}
    },
    {
        "label": "ckeck",
        "kind": 2,
        "importPath": "AUTO.scrollBar",
        "description": "AUTO.scrollBar",
        "peekOfCode": "def ckeck(self, x : int = 0, y : int = 0, max_x : int = 0, max_y : int = 0, LINE : int = 4, max_DOWN : int = 5):\n    line = max_y - (LINE+1) - y \n    if self.line > max_DOWN: pass \n    else: pass\nclass scrollBar:\n    def __init__(self): \n        pass\n    def vertical(self):\n        pass",
        "detail": "AUTO.scrollBar",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 2,
        "importPath": "DataBase.data",
        "description": "DataBase.data",
        "peekOfCode": "def case():\n    lower_case = \"abcdefghijklmnopqrstuvwxyz\"\n    upper_case = lower_case.upper()\n    return lower_case+upper_case+\"_\"\ndef base():\n    structure = {}\n    structure['input']                          = \"\"\n    # string used for the code,\n    structure['string']                         = \"\"\n    # string used to handling the output that is the must inmportant string",
        "detail": "DataBase.data",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 2,
        "importPath": "DataBase.data",
        "description": "DataBase.data",
        "peekOfCode": "def base():\n    structure = {}\n    structure['input']                          = \"\"\n    # string used for the code,\n    structure['string']                         = \"\"\n    # string used to handling the output that is the must inmportant string\n    structure['s']                              = \"\"\n    # initialisation of index associated to the input\n    structure['index']                          = 0\n    # initialisation of index I associated to the string s value",
        "detail": "DataBase.data",
        "documentation": {}
    },
    {
        "label": "indexation",
        "kind": 2,
        "importPath": "DataBase.data",
        "description": "DataBase.data",
        "peekOfCode": "def indexation():\n    indexation  = {\n        0 : {\n            'action' : 'FREE',  # [FREE, LOCKED]\n            'status' : 'I',     # [I, D] \n            'do'     : 'ADDS',  # [ADD, INSERT, INDEX]\n            'cursor' : 'NO',    # [NO, UP, DOWN, ENTER]\n            'last'   : ''\n            }\n        }",
        "detail": "DataBase.data",
        "documentation": {}
    },
    {
        "label": "clear",
        "kind": 6,
        "importPath": "configure.clear",
        "description": "configure.clear",
        "peekOfCode": "class clear:\n    clear       = u\"\\u001b[\" + \"2J\"\n    # line\n    def line( pos : int ):\n        # 2 = entire line\n        # 1 = from the cursor to start of line\n        # 0 = from the cursor to end of line\n        clearline   = u\"\\u001b[\" + f\"{pos}\" + \"K\"\n        return clearline\n    # creen ",
        "detail": "configure.clear",
        "documentation": {}
    },
    {
        "label": "fg",
        "kind": 6,
        "importPath": "configure.colors",
        "description": "configure.colors",
        "peekOfCode": "class fg:\n    black       = u\"\\u001b[30m\"\n    red         = u\"\\u001b[31m\"\n    green       = u\"\\u001b[32m\"\n    yellow      = u\"\\u001b[33m\"\n    blue        = u\"\\u001b[34m\"\n    magenta     = u\"\\u001b[35m\"\n    cyan        = u\"\\u001b[36m\"\n    white       = u\"\\u001b[37m\"\n    black_L     = u\"\\u001b[30;1m\"",
        "detail": "configure.colors",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 6,
        "importPath": "configure.colors",
        "description": "configure.colors",
        "peekOfCode": "class bg:\n    black       = u\"\\u001b[40m\"\n    red         = u\"\\u001b[41m\"\n    green       = u\"\\u001b[42m\"\n    yellow      = u\"\\u001b[43m\"\n    blue        = u\"\\u001b[44m\"\n    magenta     = u\"\\u001b[45m\"\n    cyan        = u\"\\u001b[46m\"\n    white       = u\"\\u001b[47m\"\n    black_L     = u\"\\u001b[40;1m\"",
        "detail": "configure.colors",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 6,
        "importPath": "configure.init",
        "description": "configure.init",
        "peekOfCode": "class init:\n    # reset cursor state\n    reset       = u\"\\u001b[0m\"  \n    # text bold                                \n    bold        = u\"\\u001b[1m\"\n    # text italic \n    italic      = u\"\\u001b[3m\"\n    # underline text \n    underline   = u\"\\u001b[4m\"\n    # make cursor and text blink ",
        "detail": "configure.init",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 6,
        "importPath": "configure.moveCursor",
        "description": "configure.moveCursor",
        "peekOfCode": "class cursor:\n    move = u\"\\u001b[?12h\"\n    def __init__(self):\n        pass\n    # moving cursor up \n    def UP( pos: int ):\n        up          = u\"\\u001b[\" + str( pos ) + \"A\"\n        return up\n    # moving cursor down \n    def DOWN( pos: int ):",
        "detail": "configure.moveCursor",
        "documentation": {}
    },
    {
        "label": "line",
        "kind": 6,
        "importPath": "configure.moveCursor",
        "description": "configure.moveCursor",
        "peekOfCode": "class line:\n    # next line \n    nextline = u\"\\u001b[1E\"\n    # previous line \n    prevline = u\"\\u001b[1F\"",
        "detail": "configure.moveCursor",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 2,
        "importPath": "configure.screenConfig",
        "description": "configure.screenConfig",
        "peekOfCode": "def cursor():\n    # using to get the right cursor position on the screen  at each time (x, y)\n    if os.name == \"nt\": return cursorWin()\n    else: return cursorLinux()\ndef cursorMax():\n    if os.name == \"nt\": return get_win_ter()\n    else: return get_linux_ter()\ndef cursorWin():\n    import msvcrt\n    imp.reload(sys)",
        "detail": "configure.screenConfig",
        "documentation": {}
    },
    {
        "label": "cursorMax",
        "kind": 2,
        "importPath": "configure.screenConfig",
        "description": "configure.screenConfig",
        "peekOfCode": "def cursorMax():\n    if os.name == \"nt\": return get_win_ter()\n    else: return get_linux_ter()\ndef cursorWin():\n    import msvcrt\n    imp.reload(sys)\n    try:\n        sys.stdout.write(\"\\x1b[6n\")\n        sys.stdout.flush()\n        buffer = bytes()",
        "detail": "configure.screenConfig",
        "documentation": {}
    },
    {
        "label": "cursorWin",
        "kind": 2,
        "importPath": "configure.screenConfig",
        "description": "configure.screenConfig",
        "peekOfCode": "def cursorWin():\n    import msvcrt\n    imp.reload(sys)\n    try:\n        sys.stdout.write(\"\\x1b[6n\")\n        sys.stdout.flush()\n        buffer = bytes()\n        while msvcrt.kbhit():\n            buffer += msvcrt.getch()\n        hex_loc = buffer.decode()",
        "detail": "configure.screenConfig",
        "documentation": {}
    },
    {
        "label": "cursorLinux",
        "kind": 2,
        "importPath": "configure.screenConfig",
        "description": "configure.screenConfig",
        "peekOfCode": "def cursorLinux():\n    OldStdinMode = termios.tcgetattr(sys.stdin)\n    _ = termios.tcgetattr(sys.stdin)\n    _[3] = _[3] & ~(termios.ECHO | termios.ICANON)\n    termios.tcsetattr(sys.stdin, termios.TCSAFLUSH, _)\n    try:\n        _ = \"\"\n        sys.stdout.write(\"\\x1b[6n\")\n        sys.stdout.flush()\n        while not (_ := _+sys.stdin.read(1)).endswith('R'): True",
        "detail": "configure.screenConfig",
        "documentation": {}
    },
    {
        "label": "get_win_ter",
        "kind": 2,
        "importPath": "configure.screenConfig",
        "description": "configure.screenConfig",
        "peekOfCode": "def get_win_ter():\n    # using to get the size of the screen at each time\n    from ctypes import windll, create_string_buffer\n    h = windll.kernel32.GetStdHandle(-12)\n    csbi = create_string_buffer(22)\n    res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n    if not res: return 80, 25\n    import struct\n    (bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy) = struct.unpack(\"11h\", csbi.raw)\n    width = right-left+1",
        "detail": "configure.screenConfig",
        "documentation": {}
    },
    {
        "label": "get_linux_ter",
        "kind": 2,
        "importPath": "configure.screenConfig",
        "description": "configure.screenConfig",
        "peekOfCode": "def get_linux_ter():\n    width = os.popen('tput cols', 'r').readline()\n    height= os.popen('tput lines', 'r').readline()\n    return ( int(width), int(height) )",
        "detail": "configure.screenConfig",
        "documentation": {}
    },
    {
        "label": "scrolled",
        "kind": 6,
        "importPath": "configure.scroll",
        "description": "configure.scroll",
        "peekOfCode": "class scrolled:\n    # scrollUp\n    def UP(n : int):\n        s = u\"\\u001b[\" + f\"{n}\" + \"S\"\n        return s\n    def DOWN(n : int ):\n        # scrollDown \n        s = u\"\\u001b[\" + f\"{n}\" + \"T\"\n        return s",
        "detail": "configure.scroll",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 6,
        "importPath": "configure.state",
        "description": "configure.state",
        "peekOfCode": "class save:\n    # save cursor position \n    save    = u\"\\u001b[s\" \n    # restore cursor posiion \n    restore = u\"\\u001b[u\"",
        "detail": "configure.state",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 2,
        "importPath": "fileType.fileType",
        "description": "fileType.fileType",
        "peekOfCode": "def file(FileName : str = \"\"):\n    # get extension\n    ext = FileName.split(\".\")\n    if len(ext) >= 2:\n        ext = ext[-1]\n        # python extention \n        if   ext == \"py\"            : return \"python\"\n        # R extension \n        elif ext in ['r', \"R\"]      : return \"r\"\n        # black mamba extention ",
        "detail": "fileType.fileType",
        "documentation": {}
    },
    {
        "label": "readFile",
        "kind": 2,
        "importPath": "fileType.readfile",
        "description": "fileType.readfile",
        "peekOfCode": "def readFile(fileName: str, termios : str , language :  str ):\n    # bg color \n    c_bg                   = init.init.bold + colors.bg.rgb(10, 10, 10)\n    # fg color \n    c_fg                   = init.init.bold + colors.fg.rbg(255, 255, 255)\n    # building color \n    color                  = c_bg + c_fg\n    # storing data \n    data                   = {\"writing\" : [], \"string\" : [], \"input\" : [], \"color\" : {\"m\" : [], \"n\" : [], \"color\" : [], \"locked\" : []}}\n    # locked string to set it as a comment line ",
        "detail": "fileType.readfile",
        "documentation": {}
    },
    {
        "label": "transform",
        "kind": 2,
        "importPath": "fileType.readfile",
        "description": "fileType.readfile",
        "peekOfCode": "def transform(fileName, termios : str , language :  str ):\n    # bg color \n    c_bg                   = init.init.bold + colors.bg.rgb(10, 10, 10)\n    # fg color \n    c_fg                   = init.init.bold + colors.fg.rbg(255, 255, 255)\n    # building color \n    color                  = c_bg + c_fg\n    # storing data \n    data                   = {\"writing\" : [], \"string\" : [], \"input\" : []}\n    locked                 = False ",
        "detail": "fileType.readfile",
        "documentation": {}
    },
    {
        "label": "ascii",
        "kind": 2,
        "importPath": "frame.frame",
        "description": "frame.frame",
        "peekOfCode": "def ascii(char :str ):\n    if   char == '<=' : return chr(8804)\n    elif char == '>=' : return chr(8805)\n    elif char == '/'  : return chr(247)\n    elif char == '!=' : return chr(8800)\n    elif char == '->' : return chr(8594)\n    elif char == '||' : return chr(9553)\n    elif char == '==' : return chr(9552)*2\n    else: return char \ndef frame(custom : bool = False):",
        "detail": "frame.frame",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 2,
        "importPath": "frame.frame",
        "description": "frame.frame",
        "peekOfCode": "def frame(custom : bool = False):\n    if custom is False:\n        up_l, up_r = chr(9556), chr(9559)\n        down_l, down_r = chr(9562), chr(9565)\n        med1, med2, med3 = chr(9574), chr(9577), chr(9580)\n        ver, hor = chr(9553), chr(9552)\n        vl, vr = chr(9568), chr(9571)\n        f = {'ul':up_l, 'ur':up_r, 'dl':down_l, 'dr':down_r, 'm1':med1,'m2':med2, 'm3':med3, 'v':ver, 'h':hor, 'vl':vl, 'vr': vr}\n    else:\n        up_l, up_r = chr(9487), chr(9491)",
        "detail": "frame.frame",
        "documentation": {}
    },
    {
        "label": "decoding_string",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def decoding_string():\n    import msvcrt \n    s = []   \n    while True:\n        if msvcrt.kbhit():\n            key = msvcrt.getch()\n            s.append(key)\n            if s[0] == b'\\x00':\n                try: \n                    if s[1] : break",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "windows",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def windows( ):\n    s = decoding_string()\n    number = None \n    if len(s) == 1:\n        try:\n            s = s[0].decode(\"utf-8\")\n            try: number =  [ord(s), None]\n            except TypeError: \n                #<ctrl+n>\n                if   s == \"\\x0e\":  number =  [14, None]",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "linux",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def linux():\n    #import termios, sys, tty\n    fd              = sys.stdin.fileno()\n    old_settings    = termios.tcgetattr( fd )\n    try:\n        tty.setraw(sys.stdin)\n        ch = ord( sys.stdin.read(1) )\n    finally: termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n    return ch\ndef convert():",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def convert():\n    if os.name == \"nt\": return windows()\n    else: return linux()\ndef inter():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = convert() \n        if char1 == 91: \n            char2 = ord(sys.stdin.read(1)) \n            if char2 == 49:",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "inter",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def inter():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = convert() \n        if char1 == 91: \n            char2 = ord(sys.stdin.read(1)) \n            if char2 == 49:\n                char3, char4, char5 = ord(sys.stdin.read(1)), ord(sys.stdin.read(1)), ord(sys.stdin.read(1))\n            else: pass \n        elif char1 == 27:",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def outer():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = convert() \n        if char1 == 91: \n            char2 = ord(sys.stdin.read(1)) \n            if char2 == 49:\n                char3, char4, char5 = ord(sys.stdin.read(1)), ord(sys.stdin.read(1)), ord(sys.stdin.read(1))\n            else: pass \n        elif char1 == 27:",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "win_inter",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def win_inter():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = convert() \n        if char1:\n            _     = char1[1]\n            char1 = char1[0]\n            if char1 is not None:\n                if char1 == 27:\n                    if _ is None: char1, char2, char3, char4 = win_outer()",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "win_outer",
        "kind": 2,
        "importPath": "getUserInput.input",
        "description": "getUserInput.input",
        "peekOfCode": "def win_outer():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = convert() \n        if char1:\n            _     = char1[1]\n            char1 = char1[0]\n            if char1 is not None:\n                if char1 == 27:\n                    if _ is None: char1, char2, char3, char4 = win_inter()",
        "detail": "getUserInput.input",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "header.add",
        "description": "header.add",
        "peekOfCode": "def add(dataBase):         \n    dataBase['string']  = \"\"\n    dataBase['input']   = \"\" \n    dataBase['I_S']     = 0\n    dataBase[\"index\"]   = 0 \n    dataBase['get']     = []\n    dataBase['memory'].append( dataBase['get'] )\n    dataBase['tabular'].append( dataBase['index'] )\n    dataBase['string_tab'].append( dataBase['I_S'] )\n    dataBase['liste'].append( dataBase['input'] )",
        "detail": "header.add",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "header.checkFile",
        "description": "header.checkFile",
        "peekOfCode": "def check(data, dataBase, x, y, w):\n    idd = 0\n    for s in data:\n        if s == '\\t': \n            idd += 4\n            dataBase['get'].append([x for x in range(4)])\n        else:\n            idd += 1\n            dataBase['get'].append(1)\n    dataBase['memory'][w]           = dataBase['get'] ",
        "detail": "header.checkFile",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "header.counter",
        "description": "header.counter",
        "peekOfCode": "def count(number : int , x : int , y : int , max_x : int, max_y : int, lang : str = 'python', action : bool = False):\n    move                = moveCursor.cursor\n    asc                 = frame.frame(custom=True)\n    bold                = init.init.bold\n    reset               = init.init.reset\n    c_bg                = colors.bg.rgb(10, 10, 10)  \n    c                   = bold + colors.fg.rbg(255, 255, 255)\n    _lang_              = bold+init.init.blink+ c_bg + colors.fg.rbg(0, 255, 0)+f\"{lang} program\"+ reset \n    magenta             = bold+init.init.blink+ c_bg + colors.fg.rbg(255, 0, 255)+f\"{x-2}, {number+1}\"+ reset \n    if action is False:",
        "detail": "header.counter",
        "documentation": {}
    },
    {
        "label": "formating",
        "kind": 2,
        "importPath": "header.formating",
        "description": "header.formating",
        "peekOfCode": "def formating(LINE : int = 4, data : list = [], max_x : int = 0, idd : int = 0, max_y : int = 0, MAX  = None):\n    move        = moveCursor.cursor\n    N           = max_y-(LINE+1) \n    Y           = LINE\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    c_bg        = colors.bg.rgb(10, 10, 10)  \n    c           = bold + colors.fg.rbg(255, 255, 255)\n    input, length       = header.counter(n=0)",
        "detail": "header.formating",
        "documentation": {}
    },
    {
        "label": "scrollUP",
        "kind": 2,
        "importPath": "header.formating",
        "description": "header.formating",
        "peekOfCode": "def scrollUP(data : list = [], max_x : int = 0, idd : int = 0, max_y : int = 0, y : int = 0):\n    move        = moveCursor.cursor\n    N           = max_y-(y+1) \n    Y           = y\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    c_bg        = colors.bg.rgb(10, 10, 10)  \n    c           = bold + colors.fg.rbg(255, 255, 255)\n    input, length       = header.counter(n=0)",
        "detail": "header.formating",
        "documentation": {}
    },
    {
        "label": "ClearScreen",
        "kind": 2,
        "importPath": "header.formating",
        "description": "header.formating",
        "peekOfCode": "def ClearScreen(max_x : int = 0, max_y : int = 0, LINE : int = 4):\n    move        = moveCursor.cursor\n    N           = max_y-(LINE+1) \n    Y           = LINE\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    c_bg        = colors.bg.rgb(10, 10, 10)  \n    c           = bold + colors.fg.rbg(255, 255, 255)\n    input, length       = header.counter(n=0)",
        "detail": "header.formating",
        "documentation": {}
    },
    {
        "label": "RestoringSTring",
        "kind": 2,
        "importPath": "header.formating",
        "description": "header.formating",
        "peekOfCode": "def RestoringSTring(max_x : int = 0, max_y : int = 0, LINE : int = 4, WRITE : list = [], y : int = 0, x : int = 0 ):\n    ClearScreen(max_x=max_x, max_y=max_y, LINE=LINE)\n    move        = moveCursor.cursor\n    N           = max_y-(LINE+1) \n    Y           = LINE\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    c_bg        = colors.bg.rgb(10, 10, 10)  \n    c           = bold + colors.fg.rbg(255, 255, 255)",
        "detail": "header.formating",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def title(max_x :int = 0, max_y :int = 0, size : int = 0,  color : str = \"white\",  \n                                dataBase : dict = {}, data : dict = {}, lang=\"unknwon\"):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    cc          = init.init.bold + colors.fg.rbg(255, 255, 0)\n    ball        = chr(9898)\n    string      = f\"{ball}{ball} VISION EDITOR {ball}{ball}\".center(max_x - 6)\n    move        = moveCursor.cursor \n    action      = state.save",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "writingData",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def writingData(max_x: int, n : int, x : int, y : int, color : str = \"white\", \n                dataBase : dict = {}, data : dict = {}, lang : str = \"\"):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    move_left   = moveCursor.cursor \n    position    = moveCursor.cursor\n    c_bg        = colors.bg.rgb(10, 10, 10)  \n    print_data  = data['writing'].copy()\n    string      = data['string'].copy()",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "middle",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def middle(max_x: int, n : int, x : int, y : int, color : str = \"white\", lang : str = \"unknown\"):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    move_left   = moveCursor.cursor \n    position    = moveCursor.cursor\n    c_bg        = colors.bg.rgb(10, 10, 10)\n    magenta     = bold+init.init.blink+ c_bg + colors.fg.rbg(255, 0, 255)+\"1, 1\"+ reset   \n    _lang_        = bold+init.init.blink+ c_bg + colors.fg.rbg(0, 255, 0)+f\"{lang} program\"+ colors.fg.rbg(0, 255, 255) + \" opened\" + reset \n    if color == \"white\": c   = bold + colors.fg.rbg(255, 255, 255)",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def counter(n :int , color : str = \"white\"):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold    \n    reset       = init.init.reset\n    length      = len(str(n))\n    max_x       = 5\n    if color == \"white\": c   = bold + colors.fg.rbg(255, 255, 255)\n    else: c = bold + colors.fg.rbg(0, 0, 0)\n    if (max_x - length) >= 0:  s       = f\"{c}{asc['v']}{reset} \"\n    else:  s = \"\"",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "bottom",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def bottom(max_x :int = 0, color : str = \"white\"):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold    \n    reset       = init.init.reset\n    if color == \"white\": c   = bold + colors.fg.rbg(255, 255, 255)\n    else: c = bold + colors.fg.rbg(0, 0, 0)\n    sys.stdout.write(\n        c + f\"{asc['dl']}\" + f\"{asc['h']}\" * 7 + \n        f\"{asc['h']}\" + f\"{asc['h']}\" * (max_x - 10) + \n        f\"{asc['dr']}\" + reset + \"\\n\"",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "line",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def line(x : int, y : int, max_x : int, max_y : int, scrollUp : int = 0, lang : str = \"unknwon\"):\n    \"\"\"\n    This block is used to set column and row of the cusror a each time \n    on the terminal \n    x       = is the currently row of the cursor \n    y       = is the currently column of the cursor \n    x_max   = width of the screen \n    y_max   = height of the screen \n    \"\"\"\n    bold            = init.init.bold",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "Insert",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def Insert(data, x : int, y : int, max_x : int, max_y : int, lang : str = \"unknwon\", Color : str =\"\", locked : bool=False, m : int = 0, line : int=0):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold\n    reset       = init.init.reset\n    move_left   = moveCursor.cursor \n    position    = moveCursor.cursor\n    c_bg        = colors.bg.rgb(10, 10, 10) \n    N           = len(data)\n    color       = \"white\"\n    X, Y        = x, y",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "subTitle",
        "kind": 2,
        "importPath": "header.header",
        "description": "header.header",
        "peekOfCode": "def subTitle(max_x:int, x:int, y:int, lang : str=\"\", scrollUp : int = 0):\n    bold            = init.init.bold\n    position        = moveCursor.cursor\n    reset           = init.init.reset\n    input, length   = counter(n=1)\n    asc             = frame.frame(custom=True)\n    c_bg            = colors.bg.rgb(10, 10, 10)\n    magenta         = init.init.bold + init.init.blink + c_bg + colors.fg.rbg(255, 0, 255) + f\"{x-2}, {y+scrollUp-5}\" + reset\n    c               = init.init.bold + colors.fg.rbg(255, 255, 255)\n    magenta     = bold+init.init.blink+ c_bg + colors.fg.rbg(255, 0, 255)+f\"{x}, {y}\"+ reset ",
        "detail": "header.header",
        "documentation": {}
    },
    {
        "label": "saveData",
        "kind": 6,
        "importPath": "saving.save",
        "description": "saving.save",
        "peekOfCode": "class saveData:\n    def __init__(self, dataBase ):\n        self.dataBase = dataBase\n        # getting max size (max_x, max_y) of the window \n        self.max_x, self.max_y  = screenConfig.cursorMax()\n        self._max_x_            = self.max_x \n        self.max_x            //= 2 \n        # loading the keywords for moving cursor on a particular region of the screen \n        self.move               = moveCursor.cursor\n        # loading keywords for cleaning screen and lines ",
        "detail": "saving.save",
        "documentation": {}
    },
    {
        "label": "bottom",
        "kind": 2,
        "importPath": "saving.save",
        "description": "saving.save",
        "peekOfCode": "def bottom(max_x :int = 0, color : str = \"white\"):\n    asc         = frame.frame(custom=True)\n    bold        = init.init.bold    \n    reset       = init.init.reset\n    if color == \"white\": c   = bold + colors.fg.rbg(255, 255, 255)\n    else: c = bold + colors.fg.rbg(0, 0, 0)\n    sys.stdout.write(\n        c + f\"{asc['dl']}\" + f\"{asc['h']}\" * 7 + \n        f\"{asc['h']}\" + f\"{asc['h']}\" * (max_x - 10) + \n        f\"{asc['dr']}\" + reset + \"\\n\"",
        "detail": "saving.save",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 2,
        "importPath": "saving.save",
        "description": "saving.save",
        "peekOfCode": "def case():\n    lower_case = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n    upper_case = lower_case.upper().split()\n    return lower_case.split()+upper_case+['-', '_', '.']+ [str(x) for x in range(10)]\nclass saveData:\n    def __init__(self, dataBase ):\n        self.dataBase = dataBase\n        # getting max size (max_x, max_y) of the window \n        self.max_x, self.max_y  = screenConfig.cursorMax()\n        self._max_x_            = self.max_x ",
        "detail": "saving.save",
        "documentation": {}
    },
    {
        "label": "writeInput",
        "kind": 2,
        "importPath": "saving.writing",
        "description": "saving.writing",
        "peekOfCode": "def writeInput(dataFile: list , FileName : str):\n    with open(FileName, \"w\") as file:\n        for i, string in enumerate(dataFile): \n            if i != len(dataFile)-1: file.write(f\"{string}\\n\")\n            else: file.write(f\"{string}\")\n    file.close()\ndef BLACK_M(WRITE : list = [], lang : str = \"unknown\", history : dict = {}):\n    from keywords       import words\n    from configure      import colors, init\n    # bg color ",
        "detail": "saving.writing",
        "documentation": {}
    },
    {
        "label": "BLACK_M",
        "kind": 2,
        "importPath": "saving.writing",
        "description": "saving.writing",
        "peekOfCode": "def BLACK_M(WRITE : list = [], lang : str = \"unknown\", history : dict = {}):\n    from keywords       import words\n    from configure      import colors, init\n    # bg color \n    c_bg                   = init.init.bold + colors.bg.rgb(10, 10, 10)\n    # fg color \n    c_fg                   = init.init.bold + colors.fg.rbg(255, 255, 255)\n    # building color \n    color                  = c_bg + c_fg\n    # locking string ",
        "detail": "saving.writing",
        "documentation": {}
    },
    {
        "label": "tabular",
        "kind": 2,
        "importPath": "saving.writing",
        "description": "saving.writing",
        "peekOfCode": "def tabular(string : str, lang: str = \"\"):\n    # tabular initialization\n    count   = 0\n    # locking \n    locaked = False \n    if lang in [\"python\", \"mamba\", \"c++\", \"c\"]:\n        if string: \n            for i, s in enumerate(string):\n                if string[0] == '\\t': \n                    if locaked is False:",
        "detail": "saving.writing",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 2,
        "importPath": "saving.writing",
        "description": "saving.writing",
        "peekOfCode": "def keys(count : int = 0, lang : str='', string : str = \"\"):\n    key_found = False \n    idd       = 0\n    if string: \n        if lang == 'cpmd':\n            if    string[count : 5+count] == \"&INFO\": key_found = True \n            else: pass \n        elif lang == 'mamba':\n            if   string[count : 5+count] == \"begin\"   : key_found = True \n            elif string[count : 5+count] == \"class\"   : idd = 1",
        "detail": "saving.writing",
        "documentation": {}
    },
    {
        "label": "OPEN",
        "kind": 2,
        "importPath": "saving.writing",
        "description": "saving.writing",
        "peekOfCode": "def OPEN(count : int , lang : str, locked : bool = False):\n    if locked is False : return None\n    else:\n        if   lang == \"mamba\"    : return [\"\\t\"*count + \"end\", \"\\t\"*count + \"save\" ]\n        elif lang == \"cpmd\"     : return [\"\\t\"*count + \"&END\"]\n        elif lang == \"python\"   : return [\"\\t\"*count + '\"\"\"']\n        else: return None\ndef STR(STR : str, string : str):\n    open = True \n    try:",
        "detail": "saving.writing",
        "documentation": {}
    },
    {
        "label": "STR",
        "kind": 2,
        "importPath": "saving.writing",
        "description": "saving.writing",
        "peekOfCode": "def STR(STR : str, string : str):\n    open = True \n    try:\n        if string[:len(STR)] == STR: open = False\n    except IndexError: pass\n    return open",
        "detail": "saving.writing",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 2,
        "importPath": "style.languageStyle",
        "description": "style.languageStyle",
        "peekOfCode": "def comment( name : str = \"python\"):\n    if   name in ['mamba', \"python\", \"bash\"]    : return {\"name\" : '#'}\n    elif name in ['fortran']                    : return {\"name\" : \"!\"}\n    elif name in ['c', 'c++']                   : return {\"name\" : \"//\"}\n    elif name in ['cpmd']                       : return {\"name\" : \"#\"}\n    else                                        : return {\"name\" : None}\ndef mul_cmt(name : str = \"python\"):\n    if   name in [\"python\"]     : return {\"name\" : ['\"\"\"', '\"\"\"']}\n    elif name in [\"c\", \"c++\"]   : return {\"name\" : ['/*', '*/']}\n    else: return {\"name\" : None}",
        "detail": "style.languageStyle",
        "documentation": {}
    },
    {
        "label": "mul_cmt",
        "kind": 2,
        "importPath": "style.languageStyle",
        "description": "style.languageStyle",
        "peekOfCode": "def mul_cmt(name : str = \"python\"):\n    if   name in [\"python\"]     : return {\"name\" : ['\"\"\"', '\"\"\"']}\n    elif name in [\"c\", \"c++\"]   : return {\"name\" : ['/*', '*/']}\n    else: return {\"name\" : None}\ndef ouput( name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : '->'}\n    else: return {\"name\" : None}\ndef decorator( name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : '@'}\n    else: return {\"name\" : None}",
        "detail": "style.languageStyle",
        "documentation": {}
    },
    {
        "label": "ouput",
        "kind": 2,
        "importPath": "style.languageStyle",
        "description": "style.languageStyle",
        "peekOfCode": "def ouput( name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : '->'}\n    else: return {\"name\" : None}\ndef decorator( name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : '@'}\n    else: return {\"name\" : None}\ndef delimitor(name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : \":\"}\n    elif name in ['c', \"c++\"]       : return {\"name\" : \";\"}\n    else: return {\"name\" : None}",
        "detail": "style.languageStyle",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "style.languageStyle",
        "description": "style.languageStyle",
        "peekOfCode": "def decorator( name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : '@'}\n    else: return {\"name\" : None}\ndef delimitor(name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : \":\"}\n    elif name in ['c', \"c++\"]       : return {\"name\" : \";\"}\n    else: return {\"name\" : None}\ndef characters(name : str = \"python\"):\n    if   name in [\"python\"]     : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.']}\n    elif name in ['mamba']      : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \"$\", \"?\"]}",
        "detail": "style.languageStyle",
        "documentation": {}
    },
    {
        "label": "delimitor",
        "kind": 2,
        "importPath": "style.languageStyle",
        "description": "style.languageStyle",
        "peekOfCode": "def delimitor(name : str = \"python\"):\n    if name in ['mamba', \"python\"]  : return {\"name\" : \":\"}\n    elif name in ['c', \"c++\"]       : return {\"name\" : \";\"}\n    else: return {\"name\" : None}\ndef characters(name : str = \"python\"):\n    if   name in [\"python\"]     : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.']}\n    elif name in ['mamba']      : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \"$\", \"?\"]}\n    elif name in ['c', \"c++\"]   : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \";\", \"#\"]}\n    elif name in [\"cpmd\"]       : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \";\"]}\n    else: return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \"$\", \";\", \":\"]}",
        "detail": "style.languageStyle",
        "documentation": {}
    },
    {
        "label": "characters",
        "kind": 2,
        "importPath": "style.languageStyle",
        "description": "style.languageStyle",
        "peekOfCode": "def characters(name : str = \"python\"):\n    if   name in [\"python\"]     : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.']}\n    elif name in ['mamba']      : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \"$\", \"?\"]}\n    elif name in ['c', \"c++\"]   : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \";\", \"#\"]}\n    elif name in [\"cpmd\"]       : return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \";\"]}\n    else: return {\"name\" : ['+', '-', '*', '%', '/', '<', '>', '=', '!', '|', '&', \"~\", \"[\",\"]\",'{','}', \"(\", \")\", '.', \"$\", \";\", \":\"]}",
        "detail": "style.languageStyle",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "importPath": "style.style",
        "description": "style.style",
        "peekOfCode": "class config:\n    def __init__(self, termios : str = \"monokai\"):\n        # set style \n        self.termios            = termios\n        # loading backgroung color \n        self.color_bg           = colors.bg\n        # loading foreground color \n        self.color_fg           = colors.fg\n        # loading initialization cursor parameters \n        self.init               = init.init",
        "detail": "style.style",
        "documentation": {}
    },
    {
        "label": "IDE",
        "kind": 6,
        "importPath": "mainLinux",
        "description": "mainLinux",
        "peekOfCode": "class IDE:\n    def __init__(self, termios : str = \"none\", lang : str =\"unknown\"):\n        # border configuration \n        self.acs                = frame.frame(custom=True)\n        # loading backgroung color \n        self.color_bg           = colors.bg\n        # loading foreground color \n        self.color_fg           = colors.fg\n        # loading initialization cursor parameters \n        self.init               = init.init",
        "detail": "mainLinux",
        "documentation": {}
    },
    {
        "label": "IDE",
        "kind": 6,
        "importPath": "mainWin",
        "description": "mainWin",
        "peekOfCode": "class IDE:\n    def __init__(self, termios : str = \"none\", lang : str = \"unknown\"):\n        # border configuration \n        self.acs                = frame.frame(custom=True)\n        # loading backgroung color \n        self.color_bg           = colors.bg\n        # loading foreground color \n        self.color_fg           = colors.fg\n        # loading initialization cursor parameters \n        self.init               = init.init",
        "detail": "mainWin",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "R = 8.14\nF = 9.648533289e+4\nep_rr = 9.4\u0013\nT = 300 \nep_0 = epsilon = 8.854e-12\nA = 0.66\nC0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "F = 9.648533289e+4\nep_rr = 9.4\u0013\nT = 300 \nep_0 = epsilon = 8.854e-12\nA = 0.66\nC0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "ep_rr",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "ep_rr = 9.4\u0013\nT = 300 \nep_0 = epsilon = 8.854e-12\nA = 0.66\nC0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50\nb = 50",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "T = 300 \nep_0 = epsilon = 8.854e-12\nA = 0.66\nC0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50\nb = 50\nN = 100",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "ep_0",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "ep_0 = epsilon = 8.854e-12\nA = 0.66\nC0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50\nb = 50\nN = 100\ndx = (b-a)/N ",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "A = 0.66\nC0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50\nb = 50\nN = 100\ndx = (b-a)/N \nV = [a]",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "C0",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "C0 = (ep_0 * ep_rr * R * T) / (2 * (F * A ) ** 2)\ngama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50\nb = 50\nN = 100\ndx = (b-a)/N \nV = [a]\nW = []",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "gama",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "gama = 1\nsigma = 5\nKb = 1.380649e-23\na = -50\nb = 50\nN = 100\ndx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "sigma = 5\nKb = 1.380649e-23\na = -50\nb = 50\nN = 100\ndx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):\n\ta += dx  ",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "Kb",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "Kb = 1.380649e-23\na = -50\nb = 50\nN = 100\ndx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "a = -50\nb = 50\nN = 100\ndx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)\n\tV.append(a)",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "b = 50\nN = 100\ndx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)\n\tV.append(a)\n\tW.append(B)",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "N = 100\ndx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)\n\tV.append(a)\n\tW.append(B)\nV = np.array(V)",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "dx = (b-a)/N \nV = [a]\nW = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)\n\tV.append(a)\n\tW.append(B)\nV = np.array(V)\nW = np.array(W)",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "V = [a]\nW = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)\n\tV.append(a)\n\tW.append(B)\nV = np.array(V)\nW = np.array(W)\nQ = [0]",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "W = []\nfor i in range(N):\n\ta += dx  \n\tB = a * sigma# / (Kb * T)\n\tV.append(a)\n\tW.append(B)\nV = np.array(V)\nW = np.array(W)\nQ = [0]\nfor i in range(N):",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "\tB",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "\tB = a * sigma# / (Kb * T)\n\tV.append(a)\n\tW.append(B)\nV = np.array(V)\nW = np.array(W)\nQ = [0]\nfor i in range(N):\n\tQ_M = 2 * F * C0 * A * np.sign(W[i]) * np.sqrt( 2 /  gama ) #* np.sqrt(np.log(1 + 2 * np.sinh( W[i] ) * np.sinh( W[i] ) ))\n\tQ.append(Q_M)\nprint(Q)",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "V = np.array(V)\nW = np.array(W)\nQ = [0]\nfor i in range(N):\n\tQ_M = 2 * F * C0 * A * np.sign(W[i]) * np.sqrt( 2 /  gama ) #* np.sqrt(np.log(1 + 2 * np.sinh( W[i] ) * np.sinh( W[i] ) ))\n\tQ.append(Q_M)\nprint(Q)\nplt.plot(V, Q)\nplt.show()",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "W = np.array(W)\nQ = [0]\nfor i in range(N):\n\tQ_M = 2 * F * C0 * A * np.sign(W[i]) * np.sqrt( 2 /  gama ) #* np.sqrt(np.log(1 + 2 * np.sinh( W[i] ) * np.sinh( W[i] ) ))\n\tQ.append(Q_M)\nprint(Q)\nplt.plot(V, Q)\nplt.show()",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "Q = [0]\nfor i in range(N):\n\tQ_M = 2 * F * C0 * A * np.sign(W[i]) * np.sqrt( 2 /  gama ) #* np.sqrt(np.log(1 + 2 * np.sinh( W[i] ) * np.sinh( W[i] ) ))\n\tQ.append(Q_M)\nprint(Q)\nplt.plot(V, Q)\nplt.show()",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "\tQ_M",
        "kind": 5,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "\tQ_M = 2 * F * C0 * A * np.sign(W[i]) * np.sqrt( 2 /  gama ) #* np.sqrt(np.log(1 + 2 * np.sinh( W[i] ) * np.sinh( W[i] ) ))\n\tQ.append(Q_M)\nprint(Q)\nplt.plot(V, Q)\nplt.show()",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "on_scroll",
        "kind": 2,
        "importPath": "move_even",
        "description": "move_even",
        "peekOfCode": "def on_scroll(x, y, dx, dy):\n    traiter_mouvement(x, y, dx, dy)\ndef traiter_mouvement(x, y, dx, dy):\n    # Faites quelque chose avec les valeurs de x, y, dx et dy\n    print(dy, dx)\n#with mouse.Listener(on_scroll=on_scroll) as listener:\n#    listener.join()\n\"\"\"_summary_\nwhile True:\n                try:",
        "detail": "move_even",
        "documentation": {}
    },
    {
        "label": "traiter_mouvement",
        "kind": 2,
        "importPath": "move_even",
        "description": "move_even",
        "peekOfCode": "def traiter_mouvement(x, y, dx, dy):\n    # Faites quelque chose avec les valeurs de x, y, dx et dy\n    print(dy, dx)\n#with mouse.Listener(on_scroll=on_scroll) as listener:\n#    listener.join()\n\"\"\"_summary_\nwhile True:\n                try:\n                    char1 = input.convert() \n                    if char1 == 91: ",
        "detail": "move_even",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 2,
        "importPath": "move_even",
        "description": "move_even",
        "peekOfCode": "def R():\n    next1, next2,  next3, next4, next5 = 0, 0, 0, 0, 0\n    data = []\n    while True:\n        try:\n            char = input.convert() \n            if char == 27:\n                while True:\n                    next1 = input.convert() \n                    if next1 == 91: ",
        "detail": "move_even",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "move_even",
        "description": "move_even",
        "peekOfCode": "def outer():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = input.convert() \n        if char1 == 91: \n            char2 = ord(sys.stdin.read(1)) \n            if char2 == 49:\n                char3, char4, char5 = ord(sys.stdin.read(1)), ord(sys.stdin.read(1)), ord(sys.stdin.read(1))\n            else: pass \n        elif char1 == 27:",
        "detail": "move_even",
        "documentation": {}
    },
    {
        "label": "inter",
        "kind": 2,
        "importPath": "move_even",
        "description": "move_even",
        "peekOfCode": "def inter():\n    char1, char2, char3, char4, char5 = 0, 0, 0, 0, 0\n    while True:\n        char1 = input.convert() \n        if char1 == 91: \n            char2 = ord(sys.stdin.read(1)) \n            if char2 == 49:\n                char3, char4, char5 = ord(sys.stdin.read(1)), ord(sys.stdin.read(1)), ord(sys.stdin.read(1))\n            else: pass \n        elif char1 == 27:",
        "detail": "move_even",
        "documentation": {}
    },
    {
        "label": "visionEditor",
        "kind": 2,
        "importPath": "vision",
        "description": "vision",
        "peekOfCode": "def visionEditor( ):\n    # bg color \n    c_bg                   = init.init.bold + colors.bg.rgb(10, 10, 10)\n    # fg color \n    c_fg                   = init.init.bold + colors.fg.rbg(255, 255, 255)\n    # building color \n    color                  = c_bg + c_fg\n    # get root path \n    root\t= os.path.abspath(os.curdir)\n    # path parent",
        "detail": "vision",
        "documentation": {}
    }
]